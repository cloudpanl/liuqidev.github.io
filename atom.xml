<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魔法师LQ的魔法书</title>
  
  <subtitle>研习魔法，改变世界.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.blankspace.cn/"/>
  <updated>2018-07-04T13:44:23.466Z</updated>
  <id>https://www.blankspace.cn/</id>
  
  <author>
    <name>liuqidev</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>栈</title>
    <link href="https://www.blankspace.cn/2018/07/04/stack/"/>
    <id>https://www.blankspace.cn/2018/07/04/stack/</id>
    <published>2018-07-04T13:42:00.000Z</published>
    <updated>2018-07-04T13:44:23.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a><strong>描述</strong></h3><p>实现一个栈，完成以下功能：</p><ol><li>入栈</li><li>出栈</li><li>询问栈中位置Y是谁</li></ol><p>一开始栈为空。栈中的位置从1开始（即栈底位置为1）。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h3><p>第一行一个整数n，表示操作个数。</p><p>接下来n行，每行第一个数字表示操作（见描述）：</p><ul><li>若为数字1，则接下来有一串字符串X，表示将X压入栈中。</li><li>若为数字2，表示弹出栈顶（保证栈非空），并输出出栈的这个人。</li><li>若为数字3，则接下来有一个整数Y，表示询问栈中位置Y是谁（保证位置Y合法），并输出名字。</li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h3><p>将所有操作2和操作3输出，一行一个。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a><strong>输入样例</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">1 a</span><br><span class="line">1 b</span><br><span class="line">1 c</span><br><span class="line">3 1</span><br><span class="line">3 2</span><br><span class="line">3 3</span><br><span class="line">2</span><br><span class="line">1 d</span><br><span class="line">3 1</span><br><span class="line">3 2</span><br><span class="line">3 3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a><strong>输出样例</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">c</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">d</span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a><strong>限制</strong></h3><p>对于30%的数据，1 ≤ n ≤ 2000；</p><p>对于另30%的数据，没有操作3；</p><p>对于100%的数据，1 ≤ n ≤ 100000。</p><p>数据中出现的字符串只包含26个小写字母（无空格等分隔符），且长度不超过15。</p><p>字符串有可能重复。正如现实中可能有重名一样。</p><p>时间：2 sec</p><p>空间：256 MB</p><h3 id="方法1-数组模拟"><a href="#方法1-数组模拟" class="headerlink" title="方法1 数组模拟"></a><strong>方法1 数组模拟</strong></h3><p>入栈和出栈都是操作着栈顶。</p><p>开一个大小为n的数组，记录栈顶的位置，入栈出栈就是将这栈顶加一减一，栈中某个位置Y在数组相应的下标就是Y。<br>时间复杂度：O(1)。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ================= 代码实现开始 =================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请在这里定义你需要的全局变量 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack: 栈</span></span><br><span class="line"><span class="comment">// top: 栈顶位置</span></span><br><span class="line"><span class="built_in">string</span> Stack[N];</span><br><span class="line"><span class="keyword">int</span> n, top;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压入栈顶</span></span><br><span class="line"><span class="comment">// name：被压入的人的姓名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">    Stack[++top] = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出栈顶</span></span><br><span class="line"><span class="comment">// 返回值：被弹出人的姓名</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stack[top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 询问栈中某个位置上的人的姓名（栈底位置为1，向栈顶方向的位置依次递增）</span></span><br><span class="line"><span class="comment">// pos：询问的位置</span></span><br><span class="line"><span class="comment">// 返回值：pos位置上人的姓名</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stack[pos];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ================= 代码实现结束 =================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (; n--; ) &#123;</span><br><span class="line">        <span class="keyword">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br><span class="line">            push(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pop().c_str());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pos;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, query(pos).c_str());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a><strong>结果</strong></h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/07/04/stack/stack_m1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="方法2-动态方法"><a href="#方法2-动态方法" class="headerlink" title="方法2 动态方法"></a><strong>方法2 动态方法</strong></h3><p>使用指针和new来动态开辟内存空间。push和pop和方法1类似，query则也遵守LIFO。<br>时间复杂度：O(n)。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> _top; <span class="comment">// 栈顶位置</span></span><br><span class="line"><span class="keyword">int</span> _size;  <span class="comment">// 栈大小</span></span><br><span class="line"><span class="keyword">int</span> _capacity; <span class="comment">//最大容量</span></span><br><span class="line"><span class="built_in">string</span> *elements; <span class="comment">// 数据的存储区</span></span><br><span class="line"><span class="keyword">void</span> _overflow(); <span class="comment">// 防止溢出，扩容</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyStack(<span class="keyword">int</span> n);  <span class="comment">// 构造函数</span></span><br><span class="line">~MyStack() &#123; <span class="keyword">delete</span>[] elements; &#125; <span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现的接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line">MyStack st = MyStack(N);</span><br><span class="line"><span class="keyword">int</span> num_ops;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num_ops;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_ops; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> op = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">""</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">st.push(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="built_in">string</span> r = st.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pos;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;st.query(pos)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyStack::_overflow()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span>* new_elements = <span class="keyword">new</span> <span class="built_in">string</span>[_capacity * <span class="number">2</span>];<span class="comment">//扩容成原来的两倍</span></span><br><span class="line"><span class="comment">// 将原来的数据放到新的存储区来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= _top; ++i)</span><br><span class="line">&#123;</span><br><span class="line">new_elements[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line">_capacity = _capacity * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span>[] elements; <span class="comment">//释放掉原来的存储空间</span></span><br><span class="line">elements = new_elements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyStack::MyStack(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">elements = <span class="keyword">new</span> <span class="built_in">string</span>[n];</span><br><span class="line">_top = <span class="number">0</span>;<span class="comment">// 栈顶从1开始,若从0开始则初始化为-1</span></span><br><span class="line">_size = <span class="number">0</span>;</span><br><span class="line">assert(elements != <span class="literal">NULL</span>);</span><br><span class="line">elements[_top] = <span class="string">'#'</span>; <span class="comment">//特殊字符作为哨兵</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "初始化成功!" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "栈大小为:" &lt;&lt; size() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出栈顶</span></span><br><span class="line"><span class="comment">// 返回值：被弹出人的姓名</span></span><br><span class="line"><span class="built_in">string</span> MyStack::pop()</span><br><span class="line">&#123;</span><br><span class="line">assert(_size &gt; <span class="number">0</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; "弹出栈顶元素:" &lt;&lt; top() &lt;&lt; endl;</span></span><br><span class="line">_size--;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "弹出后栈大小为:" &lt;&lt; size() &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> elements[_top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压入栈顶</span></span><br><span class="line"><span class="comment">// s：被压入的人的姓名</span></span><br><span class="line"><span class="keyword">void</span> MyStack::push(<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_full())</span><br><span class="line">&#123;</span><br><span class="line">_overflow();</span><br><span class="line">&#125;</span><br><span class="line">elements[++_top] = s;</span><br><span class="line">_size++;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "当前栈顶元素:" &lt;&lt; top() &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "栈大小为:" &lt;&lt; size() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyStack::is_empty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _size==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyStack::is_full()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (_top == _capacity - <span class="number">1</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyStack::size()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> MyStack::top()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> elements[_top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 询问栈中某个位置上的人的姓名（栈底位置为1，向栈顶方向的位置依次递增）</span></span><br><span class="line"><span class="comment">// pos：询问的位置</span></span><br><span class="line"><span class="comment">// 返回值：pos位置上人的姓名</span></span><br><span class="line"><span class="built_in">string</span> MyStack::query(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> rst;</span><br><span class="line">MyStack tmp(size());</span><br><span class="line"><span class="comment">//将要查询位置之前的元素统统弹出</span></span><br><span class="line"><span class="keyword">while</span> (pos &lt; _top)</span><br><span class="line">&#123;</span><br><span class="line">tmp.push(pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询到后将弹出的元素再弹回</span></span><br><span class="line">rst = pop();</span><br><span class="line">push(rst); <span class="comment">//查询并不改变原有的数据结构</span></span><br><span class="line"><span class="keyword">while</span>(!tmp.is_empty())</span><br><span class="line">&#123;</span><br><span class="line">push(tmp.pop());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a><strong>结果</strong></h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/07/04/stack/stack_m2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>方法2比方法1慢得多，原因主要在于动态分配存储和查询。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;实现一个栈，完成以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;li&gt;询问
      
    
    </summary>
    
      <category term="数据结构" scheme="https://www.blankspace.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="栈" scheme="https://www.blankspace.cn/tags/%E6%A0%88/"/>
    
      <category term="解题报告" scheme="https://www.blankspace.cn/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>坐而论道：邓公谈清华数据结构的新百年</title>
    <link href="https://www.blankspace.cn/2018/07/04/%E9%82%93%E5%85%AC%E8%B0%88%E6%B8%85%E5%8D%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%96%B0%E7%99%BE%E5%B9%B4/"/>
    <id>https://www.blankspace.cn/2018/07/04/邓公谈清华数据结构新百年/</id>
    <published>2018-07-04T08:41:04.000Z</published>
    <updated>2018-07-04T13:00:27.063Z</updated>
    
    <content type="html"><![CDATA[<p>本文是邓俊辉老师某次直播中关于数据结构课程问答的简记和摘要。</p><ol><li>中、小学生问：拿到了慕课的（优秀）证书，接下来如何朝着清华的计算机系方向努力？</li></ol><blockquote><p>“ CS之路漫长。知识分阶段，分层次，暂时不用想太远。兴趣，持续？数理基础？离散，代数；细致的科学，规范统一，问题大规模。”</p></blockquote><ol start="2"><li>为什么C++？</li></ol><blockquote><p>“最初Java，美国流行。国内C到C++，调整，逐渐适应。算法和数据结构不应依赖于具体语言。课程中只用到C++的子集。”</p></blockquote><ol start="3"><li>学习算法和数据结构需要什么基础？</li></ol><blockquote><p>“没有绕不过的坎。</p><p>如开车，</p><p>Level 0-驾校：怎么用，宏观的；</p><p>Level 1-发烧友：<strong>没有万能的数据结构</strong>，目前的数据结构都是有针对性的，针对于某一类特定的问题或者说适用于某一类特定的对象。能<strong>识优劣</strong>，学会选择；</p><p>Level 2: 设计算法。算法已经发展到比较成熟的阶段。</p><p>各取所需。通用的学科。”</p></blockquote><ol start="4"><li>课程和讲义并非完全对应？</li></ol><blockquote><p>“面向不同基础，层次的人。</p><p>统一教材，统一讲义，标记，编号作为区分和弥补。”</p></blockquote><ol start="5"><li>如何设置MOOC，混合式课堂的问题？</li></ol><blockquote><p>“问题来自学生，有反馈的渠道。相对集中的时间，集中收集问题，分类。要实际，基础性，理论的问题，学生自己掌握的（比传统课堂）比较好。灵活的，实际的问题稍欠缺。”</p></blockquote><ol start="6"><li>计算机和数学之关系？</li></ol><blockquote><p>“公认的，依存度很高，例如，《The Art of Computer Programming》，重要的是其中的习题；清华CS很多和数学系同学一同上课；坚持下来。</p><p>数学能告诉我们什么不能做。</p><p>技术不能解决所有问题，有的要诉诸于哲学，艺术和文化，并行不悖。</p><p>表面悲观，更敏锐了，辨是非，把精力放在更高效的地方。”</p></blockquote><ol start="7"><li>划重点?</li></ol><blockquote><p>“没有明显的重点，环环相扣，紧密相连。例如红黑树，前一环就是AVL树。把基础的，前辈的知识先学好。”</p></blockquote><ol start="8"><li>经典的书如《算法导论》，适合什么人看？</li></ol><blockquote><p>“前面谈的发烧友级别，《算导》，《计算机编程艺术》，《算法》等这些经典的书都要看，老师从这里学到的。实证。可视化。”</p></blockquote><ol start="9"><li>慕课开课讲师的感受？</li></ol><blockquote><p>”接触很早，最早怀疑态度。’上春晚‘，有个人抱负在其中。身份特殊，使命，接力棒传接。</p><p>事实和数字。事实：国内至少当时讲数据结构的教材，内容和体例，和自己当年读书时大部分一样；数字：工作30年，学科的内容没有提上去。虽然把教材写出来，但影响有限。内容为王。</p><p>制作成本很低。个人潜能爆发期。尽可能保持完整性。将校内的平台打通，THU校内公选课课堂，甚至CST计算机系课堂。讲义，程序，演示，免费下载。教学工具，记下所有的笔记。有纵深，内容完整，能够玩起来，共享 。  “</p></blockquote><ol start="10"><li>会开后续的MOOC吗？</li></ol><blockquote><p>“不大可能，但学无止境。知识体系，基本贯通了（1000多个知识点）。<a href="https://www.acm.org/binaries/content/assets/education/cs2013_web_final.pdf" target="_blank" rel="noopener">ACM &amp; IEEE Computer Science Curricula</a>，是主要参考，但怎么做都不可能完全覆盖，怎么做都不够。</p><p>大数据，有所体现，小集合，重复，例如一个测点数据量几百兆，强调问题的真实性。</p><p>正在写第四版教材。”</p></blockquote><ol start="11"><li>如何检索到课程中没有出现的数据结构？</li></ol><blockquote><p>“查查handbook。</p><p>汪洋大海，学习其子集。抓住骨架和方法。</p><p><strong>不要在意自己什么没学</strong>，思考算法和数据结构背后的（原理和思想），为什么能成，最终建立自信！”</p></blockquote><ol start="12"><li>数据结构新领域，新模式</li></ol><blockquote><p>“例如GPU，流计算，online的计算。懂一些硬件。暂未脱离图灵，冯诺依曼体系，数据为中心，存储程序，”凡物皆数”，有的数据一去不复还。学习方法，不变的东西。 “</p></blockquote><ol start="13"><li>继续深造，学习慕课就够了吗？有什么书单？</li></ol><blockquote><p>“完全有可能。</p><p>要学通学透，要灵活，会应用。</p><p>“好学生”，四个方面，</p><p>1.<strong>思维方式</strong>，计算思维，学会使用这种计算思维解决问题，严谨，求异思维，在前人的基础上，学习行业的思维方式；</p><p>2.<strong>样式套路</strong>：知识点，解题方法，数据结构和算法，硬币正反面;方法论，如分而治之，减而治之等；</p><p>3.综合应用能力；</p><p>4.针对一些问题，在没有现成解决方案的情况下，自己造轮子，改轮子，给别人用。”</p></blockquote><ol start="14"><li>对考研有什么帮助？</li></ol><blockquote><p>考的就是THU，dsa分数占比最大，自主命题。打住。肯定是有帮助。</p></blockquote><ol start="15"><li>什么才是“一流的课程”?</li></ol><blockquote><p>“什么是好老师？个性，风范。学术的基因，多年之后能够记起。</p><p>好课程？要严肃，有考试，作业，DDL，分数不能很高。</p><p>苦涩的感觉。痛并快乐着。回甘，有趣，味。在不同阶段有不同味道。 ”</p></blockquote><ol start="16"><li>清华的情怀是什么？</li></ol><blockquote><p>“教给我，真诚。’不自欺，不想欺‘。</p><p>认为自己教的东西是美的。</p><p>有担当。</p><p>如何当一个读书人：士之读书治学，盖将以脱心志于俗谛之桎梏，真理因得以发扬。不要受到桎梏，读书是摆脱精神桎梏最简便的途径。 “</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是邓俊辉老师某次直播中关于数据结构课程问答的简记和摘要。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中、小学生问：拿到了慕课的（优秀）证书，接下来如何朝着清华的计算机系方向努力？&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;“ CS之路漫长。知识分阶段，分层次，暂时不用想太远
      
    
    </summary>
    
      <category term="演讲" scheme="https://www.blankspace.cn/categories/%E6%BC%94%E8%AE%B2/"/>
    
    
      <category term="清华" scheme="https://www.blankspace.cn/tags/%E6%B8%85%E5%8D%8E/"/>
    
      <category term="邓俊辉" scheme="https://www.blankspace.cn/tags/%E9%82%93%E4%BF%8A%E8%BE%89/"/>
    
      <category term="数据结构" scheme="https://www.blankspace.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="mooc" scheme="https://www.blankspace.cn/tags/mooc/"/>
    
  </entry>
  
  <entry>
    <title>本博客基本操作备忘</title>
    <link href="https://www.blankspace.cn/2018/07/03/%E5%A4%87%E5%BF%98/"/>
    <id>https://www.blankspace.cn/2018/07/03/备忘/</id>
    <published>2018-07-03T08:27:26.000Z</published>
    <updated>2018-07-03T14:54:46.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章归类和标记"><a href="#文章归类和标记" class="headerlink" title="文章归类和标记"></a>文章归类和标记</h2><p>比较完整的文章设置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: page/tags/categories</span><br><span class="line">title: xxx                      # 必须，页面名称</span><br><span class="line">date: 2018-07-03 16:27:26</span><br><span class="line">tags: [Hexo, HTML]</span><br><span class="line">categories: [Web前端]</span><br><span class="line">description: 描述               # 页面二级标题，描述性文字</span><br><span class="line">comments: false/true</span><br><span class="line">reward: false/true             # 打赏</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="生成摘要"><a href="#生成摘要" class="headerlink" title="生成摘要"></a>生成摘要</h2><p>在 Markdown 中加 <code>&lt;!-- more --&gt;</code><br><a id="more"></a></p><h2 id="文章中插入"><a href="#文章中插入" class="headerlink" title="文章中插入"></a>文章中插入</h2><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><ul><li>引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 幼小，可怜，又无助。</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>幼小，可怜，又无助。</p></blockquote><ul><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># i want to fly</span></span><br><span class="line"><span class="keyword">from</span> fly <span class="keyword">import</span> fly </span><br><span class="line">i.fly()</span><br></pre></td></tr></table></figure></li><li><p>公式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">C^&#123;m&#125;_&#123;n&#125;=\frac&#123;n!&#125;&#123;m!\left( n-m\right)!&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></li></ul><p>$$<br>C^{m}_{n}=\frac{n!}{m!\left( n-m\right)!}<br>$$</p><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>先到<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">fontawesome</a>查找需要的图标，然后在文章中按照如下规则输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p><i class="icon icon-book"></i></p><p>图标样式前缀均为 <code>icon</code>，此外还有 5 个图标大小调节类和 1 个间距类。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.3倍大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book icon-lg"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2倍大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book icon-2x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3倍大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book icon-3x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4倍大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book icon-4x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5倍大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book icon-5x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5px右边距 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book icon-pr"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5px左边距 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-book icon-pl"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/07/03/备忘/无助.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=25772366&amp;cid=44004290&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; width=&quot;100%&quot; height=&quot;600px&quot;&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?aid=25772366&cid=44004290&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="600px"> </iframe><h3 id="音乐："><a href="#音乐：" class="headerlink" title="音乐："></a>音乐：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=2117009&amp;auto=1&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"650"</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=0&amp;id=75791641&amp;auto=0&amp;height=430"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2117009&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="650" src="http://music.163.com/outchain/player?type=0&id=75791641&auto=0&height=430"></iframe><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"matrixcookbook.pdf#toolbar=0&amp;navpanes=0&amp;scrollbar=0"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"600px"</span>&gt;</span></span><br></pre></td></tr></table></figure><embed src="matrixcookbook.pdf#toolbar=0&navpanes=0&scrollbar=0" width="100%" height="600px"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"matrixcookbook.pdf"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"600px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe src="matrixcookbook.pdf" width="100%" height="600px"></iframe>]]></content>
    
    <summary type="html">
    
      对本博客所有博文都适用的部分设置和一般操作。
    
    </summary>
    
      <category term="Web前端" scheme="https://www.blankspace.cn/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="https://www.blankspace.cn/tags/Hexo/"/>
    
      <category term="HTML" scheme="https://www.blankspace.cn/tags/HTML/"/>
    
  </entry>
  
</feed>
